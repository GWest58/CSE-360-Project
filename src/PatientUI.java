/**
 *
 * @author Alexandra Nazareno and Nizar Kury
 */

// This class is the main boundary class for patient interaction with the efferent patient care system.
// Look at each action handler for more information on how the patient can interact with the UI.

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;

public class PatientUI extends javax.swing.JFrame {

    /**
<<<<<<< HEAD
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
		public PatientUI(Patient patient) {
		    initComponents(patient);
		}

    @SuppressWarnings({ "unchecked", "deprecation" })
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents(Patient patient) {

    	// further initialization of global variables
        PatientTabbedPane = new javax.swing.JTabbedPane();
        symptomHistoryTab = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        showSymptoms = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<String>();
        jLabel5 = new javax.swing.JLabel();
        submitSymptomsTab = new javax.swing.JPanel();
        painSlider = new javax.swing.JSlider();
        shortnessOfBreathSlider = new javax.swing.JSlider();
        wellbeingSlider = new javax.swing.JSlider();
        anxietySlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        tirednessSlider = new javax.swing.JSlider();
        depressionSlider = new javax.swing.JSlider();
        nauseaSlider = new javax.swing.JSlider();
        appetiteSlider = new javax.swing.JSlider();
        drowsinessSlider = new javax.swing.JSlider();
        otherSlider = new javax.swing.JSlider();
        submitButton = new javax.swing.JButton();
        painLabel = new javax.swing.JLabel();
        shortnessOfBreathLabel = new javax.swing.JLabel();
        wellBeingLabel = new javax.swing.JLabel();
        anxietyLabel = new javax.swing.JLabel();
        tirednessLabel = new javax.swing.JLabel();
        depressionLabel = new javax.swing.JLabel();
        nauseaLabel = new javax.swing.JLabel();
        appetiteLabel = new javax.swing.JLabel();
        drowsinessLabel = new javax.swing.JLabel();
        otherLabel = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        
        // SET THE WINDOW SIZE/ETC.
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
       // setPreferredSize(new java.awt.Dimension(900, 1200));
        
        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel3.setText("Symptom History");
        
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        //check if submitting symptoms within specified time frame???
        Date date = new Date();
        String today = dateFormat.format(date);
        
        // tutorial system that activates for new patients. When a patient has not submitted any symptoms,
        // this pop-up message informs them of all the features present in the efferent patient care system.
        if(patient.isSymptomListEmpty()){
   		 javax.swing.JOptionPane.showMessageDialog(submitSymptomsTab, "Welcome to the Efferent Patient Care System!\n\n"
   		 		+ "We see you haven't submitted any symptoms yet and would love to get you started.\n"
   		 		+ "When you first open up the Efferent Patient Care System, you will be greeted with several sliders."
   		 		+ "Rate these symptoms from 1 to 10, 1 being the lowest feeling of that symptom while 10 being the highest.\n"
   		 		+ "You can only submit symptoms once per day and they will be sent to your corresponding doctor.\n"
   		 		+ "To see your assigned doctor, go to the \"Patient Information\" tab. You can alter any of your profile information here as well.\n"
   		 		+ "In the \"Messages\" tab, you can see recent doctor messages and prescriptions.\n\n"
   		 		+ "Thank you for using the Efferent Patient Care System. We hope to provide you extra convenience.");
        }
        
        // tutorial system that checks if a user has inputted any symptoms for the day. If they havent,
        // then information on what each symptom entails is displayed to them.
        if(!patient.checkDate(today)){
        	javax.swing.JOptionPane.showMessageDialog(submitSymptomsTab, "Welcome to the Efferent Patient Care System!\n\n"
       		 		+ "We see you haven't submitted any symptoms today and would like to remind you what each symptom entails:\n\n"
       		 		+ "Pain- do you feel any sharp or sudden aches or intense physical discomfort?\n"
       		 		+ "Shortness of Breath- is it hard to breathe right now?\n"
       		 		+ "Wellbeing- do you feel weak, feeble, and overall down in the dumps?\n"
       		 		+ "Anxiety- do you feel overly jittery or stressful?\n"
       		 		+ "Tiredness- do you feel constantly tired despite resting?\n"
       		 		+ "Depression- do you feel isolated and lonely like the whole world is against you?\n"
       		 		+ "Nausea- how likely will you vomit in the next thirty minutes?\n"
       		 		+ "Appetite- do you have a constant urge to eat and are never satisfied afterwards?\n"
       		 		+ "Drowsiness- do you constantly feel sleepy?\n"
       		 		+ "Other- if there are other symptoms that you are feeling that are not listed here,\n\tplease rate it and notify your doctor afterwards\n\n"
       		 		+ "We hope you have an easy time using the Efferent Patient Care System.");
        }
        else
        	javax.swing.JOptionPane.showMessageDialog(submitSymptomsTab, "We see you have already inputted symptoms for the day.\n"
        			+ "Please log back in tomorrow to input more symptoms.\n"
        			+ "If there is an emergency, please call your doctor right away or 9-1-1.\n"
        			+ "You can still view your recent symptom history, edit profile information, or view doctor messages and prescriptions.\n\n"
        			+ "Thank you for using the Efferent Patient Care System!");
        
        showSymptoms.setEditable(false);
        showSymptoms.setColumns(30);
        showSymptoms.setRows(5);
        showSymptoms.setLineWrap(false);
        showSymptoms.setFont(new java.awt.Font("Tahoma", 0, 16));
        jScrollPane1.setViewportView(showSymptoms);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Select Symptom");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] {" ", "Pain", "Shortness of Breath", "Wellbeing", "Anxiety", "Tiredness", "Depression", "Appetite", "Nausea", "Drowsiness", "Other" }));
        jComboBox1.setToolTipText("");
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tableActionPerformed(evt, patient);
            }
        });
        
        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Select a symptom from the drop-down menu to view its previous ratings.");

        javax.swing.GroupLayout symptomHistoryTabLayout = new javax.swing.GroupLayout(symptomHistoryTab);
        symptomHistoryTab.setLayout(symptomHistoryTabLayout);
        symptomHistoryTabLayout.setHorizontalGroup(
            symptomHistoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, symptomHistoryTabLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(308, 308, 308))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, symptomHistoryTabLayout.createSequentialGroup()
                .addContainerGap(462, Short.MAX_VALUE)
                .addGroup(symptomHistoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, symptomHistoryTabLayout.createSequentialGroup()
                        .addGroup(symptomHistoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(symptomHistoryTabLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(48, 48, 48)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel3))
                        .addGap(404, 404, 404))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, symptomHistoryTabLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(331, 331, 331))))
        );
        symptomHistoryTabLayout.setVerticalGroup(
            symptomHistoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(symptomHistoryTabLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addGroup(symptomHistoryTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(177, 177, 177))
        );
        
        painSlider.setMajorTickSpacing(1);
        painSlider.setMaximum(10);
        painSlider.setPaintLabels(true);
        painSlider.setValue(0);

        shortnessOfBreathSlider.setMajorTickSpacing(1);
        shortnessOfBreathSlider.setMaximum(10);
        shortnessOfBreathSlider.setPaintLabels(true);
        shortnessOfBreathSlider.setValue(0);

        wellbeingSlider.setMajorTickSpacing(1);
        wellbeingSlider.setMaximum(10);
        wellbeingSlider.setPaintLabels(true);
        wellbeingSlider.setValue(0);

        anxietySlider.setMajorTickSpacing(1);
        anxietySlider.setMaximum(10);
        anxietySlider.setPaintLabels(true);
        anxietySlider.setValue(0);
        
        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SUBMIT SYMPTOMS");
        
        tirednessSlider.setMajorTickSpacing(1);
        tirednessSlider.setMaximum(10);
        tirednessSlider.setPaintLabels(true);
        tirednessSlider.setValue(0);
        
        depressionSlider.setMajorTickSpacing(1);
        depressionSlider.setMaximum(10);
        depressionSlider.setPaintLabels(true);
        depressionSlider.setValue(0);
        
        nauseaSlider.setMajorTickSpacing(1);
        nauseaSlider.setMaximum(10);
        nauseaSlider.setPaintLabels(true);
        nauseaSlider.setValue(0);
        
        appetiteSlider.setMajorTickSpacing(1);
        appetiteSlider.setMaximum(10);
        appetiteSlider.setPaintLabels(true);
        appetiteSlider.setValue(0);
        
        drowsinessSlider.setMajorTickSpacing(1);
        drowsinessSlider.setMaximum(10);
        drowsinessSlider.setPaintLabels(true);
        drowsinessSlider.setValue(0);
        
        otherSlider.setMajorTickSpacing(1);
        otherSlider.setMaximum(10);
        otherSlider.setPaintLabels(true);
        otherSlider.setValue(0);
        
        submitButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        submitButton.setText("SUBMIT");
        
        // if any one of the symptoms in the patient is already inputted for today, button is disabled.
        // Otherwise, button is enabled.       
        boolean buttonEnabled = true;
        for(int i = 0; i < patient.getSymptoms().size(); i++){
        	if(patient.getSymptoms().get(i).getDate().equals(today)){
        		submitButton.setEnabled(false);
        		buttonEnabled = false;
        		break;
        	}
        }
        if(buttonEnabled){
        	submitButton.setEnabled(true);
        }
        
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt, patient);
            }
        });

        painLabel.setText("Pain");

        shortnessOfBreathLabel.setText("Shortness of Breath");

        wellBeingLabel.setText("Wellbeing");

        anxietyLabel.setText("Anxiety");

        tirednessLabel.setText("Tiredness");

        depressionLabel.setText("Depression");

        nauseaLabel.setText("Nausea");

        appetiteLabel.setText("Appetite");

        drowsinessLabel.setText("Drowsiness");

        otherLabel.setText("Other");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Please rate each symptom as accurately as possible between 1 and 10, with 1 being the lowest and 10 being the highest.");

        javax.swing.GroupLayout submitSymptomsTabLayout = new javax.swing.GroupLayout(submitSymptomsTab);
        submitSymptomsTab.setLayout(submitSymptomsTabLayout);
        submitSymptomsTabLayout.setHorizontalGroup(
            submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(painSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(shortnessOfBreathSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(anxietySlider, javax.swing.GroupLayout.PREFERRED_SIZE, 416, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tirednessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 422, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(drowsinessSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(otherSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appetiteSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nauseaSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depressionSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
            .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                .addGap(210, 210, 210)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(painLabel)
                    .addComponent(shortnessOfBreathLabel)
                    .addComponent(wellBeingLabel)
                    .addComponent(anxietyLabel)
                    .addComponent(tirednessLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(otherLabel)
                    .addComponent(drowsinessLabel)
                    .addComponent(appetiteLabel)
                    .addComponent(nauseaLabel)
                    .addComponent(depressionLabel))
                .addGap(221, 221, 221))
            .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(wellbeingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                        .addGap(414, 414, 414)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, submitSymptomsTabLayout.createSequentialGroup()
                .addContainerGap(260, Short.MAX_VALUE)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, submitSymptomsTabLayout.createSequentialGroup()
                        .addComponent(submitButton)
                        .addGap(568, 568, 568))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, submitSymptomsTabLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(245, 245, 245))))
        );

        submitSymptomsTabLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {appetiteSlider, depressionSlider, drowsinessSlider, nauseaSlider, otherSlider, painSlider, shortnessOfBreathSlider, tirednessSlider, wellbeingSlider});

        submitSymptomsTabLayout.setVerticalGroup(
            submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(submitSymptomsTabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addGap(30, 30, 30)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(painLabel)
                    .addComponent(depressionLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(painSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depressionSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shortnessOfBreathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nauseaLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shortnessOfBreathSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nauseaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellBeingLabel)
                    .addComponent(appetiteLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wellbeingSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(appetiteSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anxietyLabel)
                    .addComponent(drowsinessLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(anxietySlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drowsinessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tirednessLabel)
                    .addComponent(otherLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(submitSymptomsTabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tirednessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(otherSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(submitButton)
                .addGap(24, 24, 24))
        );

        PatientTabbedPane.addTab("Symptoms", submitSymptomsTab);
        PatientTabbedPane.addTab("Symptom History", symptomHistoryTab);
        
        // initializing more global variables
        patientInfoPanel = new javax.swing.JPanel();
        patientName = new javax.swing.JLabel();
        providerName = new javax.swing.JLabel();
        patientDOB = new javax.swing.JLabel();
        patientSex = new javax.swing.JLabel();
        emailHeader = new javax.swing.JLabel();
        patientEmail = new javax.swing.JLabel();
        editEmail = new javax.swing.JTextField();
        phoneHeader = new javax.swing.JLabel();
        patientPhone = new javax.swing.JLabel();
        editPhone = new javax.swing.JTextField();
        addressHeader = new javax.swing.JLabel();
        streetAddr = new javax.swing.JLabel();
        editStreet = new javax.swing.JTextField();
        cityStateAddr = new javax.swing.JLabel();
        editCityState = new javax.swing.JTextField();
        pharHeader = new javax.swing.JLabel();
        pharName = new javax.swing.JLabel();
        pharCityState = new javax.swing.JLabel();
        pharPhone = new javax.swing.JLabel();
        editPharName = new javax.swing.JTextField();
        editPharCity = new javax.swing.JTextField();
        editPharPhone = new javax.swing.JTextField();
        editInfoButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        dateReceivedHeader = new javax.swing.JLabel();
        messageDates = new javax.swing.JComboBox();
        messageHeader = new javax.swing.JLabel();
        JScrollPane3 = new javax.swing.JScrollPane();
        messages = new javax.swing.JTextArea();
        prescriptionHeader = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        prescriptionSummary = new javax.swing.JTextArea();
        prescriptionSummary.setEditable(false);
        
        patientName.setFont(new java.awt.Font("Georgia", 0, 24)); // NOI18N
        patientName.setText(patient.getname());

        providerName.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        providerName.setText("Provider: " + patient.getDoctor().getname());

        emailHeader.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        emailHeader.setText("Email:");

        patientEmail.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        patientEmail.setText(patient.getEmail());

        editEmail.setText("Enter new email address here");
        
        editEmail.addFocusListener(new FocusAdapter() {
        	public void focusGained(FocusEvent e){
        	JTextField source = (JTextField)e.getComponent();
        	source.setText("");
        	source.removeFocusListener(this);
        	}
        });
        
        phoneHeader.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        phoneHeader.setText("Phone Number:");

        patientPhone.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        patientPhone.setText("(" + patient.getPhoneNumber().substring(0, 3) + ") " +
        		patient.getPhoneNumber().substring(3, 6) + "-" + 
        		patient.getPhoneNumber().substring(6, patient.getPhoneNumber().length()));

        editPhone.setText("Enter new phone number here");
        editPhone.addFocusListener(new FocusAdapter() {
        	public void focusGained(FocusEvent e){
        	JTextField source = (JTextField)e.getComponent();
        	source.setText("");
        	source.removeFocusListener(this);
        	}
        });

        addressHeader.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        addressHeader.setText("Address:");

        streetAddr.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        streetAddr.setText(patient.getStreetAddress());

        editStreet.setText("Enter new street address here");
        editStreet.addFocusListener(new FocusAdapter() {
        	public void focusGained(FocusEvent e){
        	JTextField source = (JTextField)e.getComponent();
        	source.setText("");
        	source.removeFocusListener(this);
        	}
        });
      
        cityStateAddr.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        cityStateAddr.setText(patient.getCityStateAddress());

        editCityState.setText("Enter new city, state zip here");
        editCityState.setToolTipText("");
        editCityState.addFocusListener(new FocusAdapter() {
        	public void focusGained(FocusEvent e){
        	JTextField source = (JTextField)e.getComponent();
        	source.setText("");
        	source.removeFocusListener(this);
        	}
        });
    
        pharHeader.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        pharHeader.setText("Pharmacy:");

        pharName.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        pharName.setText(patient.getPharmacy().getName());

        pharCityState.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        pharCityState.setText(patient.getPharmacy().getAddress());

        pharPhone.setFont(new java.awt.Font("Georgia", 0, 16)); // NOI18N
        pharPhone.setText("(" + patient.getPharmacy().getPhone().substring(0, 3) + ") " +
        		patient.getPharmacy().getPhone().substring(3, 6) + "-" + 
        		patient.getPharmacy().getPhone().substring(6, patient.getPharmacy().getPhone().length()));

        editPharName.setText("Enter new pharmacy name");
        editPharName.setToolTipText("");
        editPharName.addFocusListener(new FocusAdapter() {
        	public void focusGained(FocusEvent e){
        	JTextField source = (JTextField)e.getComponent();
        	source.setText("");
        	source.removeFocusListener(this);
        	}
        });
   
        editPharCity.setText("Enter new pharmacy city, state");
        editPharCity.setToolTipText("");
        editPharCity.addFocusListener(new FocusAdapter() {
        	public void focusGained(FocusEvent e){
        	JTextField source = (JTextField)e.getComponent();
        	source.setText("");
        	source.removeFocusListener(this);
        	}
        });

        editPharPhone.setText("Enter new pharmacy phone number");
        editPharPhone.setToolTipText("");
        editPharPhone.addFocusListener(new FocusAdapter() {
        	public void focusGained(FocusEvent e){
        	JTextField source = (JTextField)e.getComponent();
        	source.setText("");
        	source.removeFocusListener(this);
        	}
        });

        editInfoButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editInfoButton.setText("Edit");
        editInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt, patient);
            }
        });
        javax.swing.GroupLayout patientInfoPanelLayout = new javax.swing.GroupLayout(patientInfoPanel);
        patientInfoPanel.setLayout(patientInfoPanelLayout);
        patientInfoPanelLayout.setHorizontalGroup(
            patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientInfoPanelLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(patientSex)
                            .addComponent(patientName)
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(patientDOB)
                                    .addComponent(providerName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editInfoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(64, 64, 64))))
                    .addGroup(patientInfoPanelLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(phoneHeader)
                            .addComponent(emailHeader)
                            .addComponent(pharHeader)
                            .addComponent(addressHeader))
                        .addGap(29, 29, 29)
                        .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addComponent(cityStateAddr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editCityState, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addComponent(patientPhone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addComponent(streetAddr)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editStreet, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addComponent(patientEmail)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addComponent(pharPhone)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editPharPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addComponent(pharName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                                .addComponent(editPharName, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                                .addComponent(pharCityState)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(editPharCity, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        patientInfoPanelLayout.setVerticalGroup(
            patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(patientInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(patientName)
                .addGap(1, 1, 1)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(patientInfoPanelLayout.createSequentialGroup()
                        .addComponent(providerName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(patientDOB, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editInfoButton, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(patientSex)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(emailHeader)
                    .addComponent(patientEmail)
                    .addComponent(editEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phoneHeader)
                    .addComponent(patientPhone)
                    .addComponent(editPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addressHeader)
                    .addComponent(streetAddr)
                    .addComponent(editStreet, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cityStateAddr)
                    .addComponent(editCityState, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pharHeader)
                    .addComponent(pharName)
                    .addComponent(editPharName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pharCityState)
                    .addComponent(editPharCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(patientInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pharPhone)
                    .addComponent(editPharPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        
    
        
        PatientTabbedPane.addTab("Patient Information", patientInfoPanel);

        dateReceivedHeader.setFont(new java.awt.Font("Georgia", 0, 12)); // NOI18N
        dateReceivedHeader.setText("Date Received: ");
        
        setMessageDates(patient);
               
     
        messageDates.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                messageDatesActionPerformed(evt, patient);
            }
        });

        messageHeader.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        messageHeader.setText("Message:");
        
        messages.setEditable(false);
        messages.setColumns(40);
        messages.setRows(5);
        messages.setFont(new java.awt.Font("Tahoma", 0, 14));
        messages.setLineWrap(true);
      
        JScrollPane3.setViewportView(messages);

        prescriptionHeader.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        prescriptionHeader.setText("Latest Prescription");

        prescriptionSummary.setColumns(40);
        prescriptionSummary.setRows(5);
        prescriptionSummary.setFont(new java.awt.Font("Tahoma", 0, 14));
        jScrollPane2.setViewportView(prescriptionSummary);
        
        setPrescriptions(patient);
        
        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateReceivedHeader)
                    .addComponent(messageDates, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(77, 77, 77)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(prescriptionHeader)
                    .addComponent(JScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 321, Short.MAX_VALUE)
                    .addComponent(messageHeader)
                    .addComponent(jScrollPane2))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dateReceivedHeader)
                    .addComponent(messageHeader))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(messageDates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(prescriptionHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        PatientTabbedPane.addTab("Messages", jPanel2);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PatientTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(PatientTabbedPane)
                .addContainerGap())
        ); 
  
       pack();
    }// </editor-fold>                        

    private boolean checkVal(double val){
        if (val <=10 && val > 0)
            return true;
        else
            return false;
    }
    
    // this action handler is in the "Submit Symptoms" tab and is used to retrieve the data from each 
    // slider and store it in a SymptomList for the patient. The symptoms are the bread and butter of the
    // whole efferent patient care system so we need to treat this information delicately and store it
    // efficiently. 
    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt, Patient patient) {                                             
    
        int painRate = painSlider.getValue();
        int shortnessOfBreathRate = shortnessOfBreathSlider.getValue();
        int wellbeingRate = wellbeingSlider.getValue();     
        int anxietyRate = anxietySlider.getValue();
        int tirednessRate = tirednessSlider.getValue();
        int depressionRate = depressionSlider.getValue();
        int nauseaRate = nauseaSlider.getValue();
        int appetiteRate = appetiteSlider.getValue();
        int drowsinessRate = drowsinessSlider.getValue();
        int otherRate = otherSlider.getValue();
        
        DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy");
        //check if submitting symptoms within specified time frame???
        Date date = new Date();
        String today = dateFormat.format(date);
  
        int patientIndex = 0;
    	Doctor temp = null;
    	
    	docList = Serialize.deserialize("src/doctor.bin");
    	
    	for(int i = 0; i < docList.size(); i++)	//finds and removes doc from the doc list
												// we remove doc from the list so that way we can readd him
												// and write a fresh new serializable file
        {
        	if(docList.get(i).getEmail().equalsIgnoreCase(patient.getDoctor().getEmail()) 
        			&& docList.get(i).getPassword().equals(patient.getDoctor().getPassword()))
        	{
        		for(int j = 0; j < docList.get(i).getPatientList().size(); j++){
        			if(patient.getEmail().equalsIgnoreCase(docList.get(i).getPatientList().get(j).getEmail())
        					&& patient.getPassword().equals(docList.get(i).getPatientList().get(j).getPassword())){
        						patientIndex = j;
        						temp = docList.get(i);
        						docList.remove(i);
        			     		break;
        			}
        		}
        	}
        }
    	
        	//check if all values are valid
        if (checkVal(painRate) && checkVal(shortnessOfBreathRate) && checkVal(wellbeingRate) && checkVal(anxietyRate) && checkVal(tirednessRate) &&
        			checkVal(depressionRate) && checkVal(nauseaRate) && checkVal(appetiteRate) && checkVal(drowsinessRate) && checkVal(otherRate))
        	{
        		submitButton.setEnabled(false);
        	
        		//add new symptoms to pt's symptom list
        		patient.newSymptom("Pain", painRate, today);
        		patient.newSymptom("Shortness of Breath", shortnessOfBreathRate, today);
        		patient.newSymptom("Wellbeing", wellbeingRate, today);
        		patient.newSymptom("Anxiety", anxietyRate, today);
        		patient.newSymptom("Tiredness", tirednessRate, today);
        		patient.newSymptom("Depression", depressionRate, today);
        		patient.newSymptom("Nausea", nauseaRate, today);
        		patient.newSymptom("Appetite", appetiteRate, today);
        		patient.newSymptom("Drowsiness", drowsinessRate, today);
        		patient.newSymptom("Other", otherRate, today); 
        		temp.getPatientList().get(patientIndex).newSymptomList(patient.getSymptoms());
        		
        		JOptionPane.showMessageDialog(jScrollPane1, "Symptoms submitted! Please log in another day to input more symptom ratings.");//, "error", JOptionPane.ERROR_MESSAGE);
        	    
        		// reset all the sliders to 0
        		painSlider.setValue(0);
        	    shortnessOfBreathSlider.setValue(0);
        	    wellbeingSlider.setValue(0);
        	    anxietySlider.setValue(0);
        	    tirednessSlider.setValue(0);
        	    depressionSlider.setValue(0);
        	    nauseaSlider.setValue(0);
        	    appetiteSlider.setValue(0);
        	    drowsinessSlider.setValue(0);
        	    otherSlider.setValue(0);
        	 
        	}
        	// if any one of the sliders has not been used, then an error message will pop up requesting the
        	// user to submit a symptom by using the slider.
        	else if (!checkVal(painRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Pain between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(shortnessOfBreathRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Shortness of Breath between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(wellbeingRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Wellbeing between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(anxietyRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Anxiety between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(tirednessRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Tiredness between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(depressionRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Depression between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(nauseaRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Nausea between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(appetiteRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Appetite between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(drowsinessRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Drowsiness between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        	else if (!checkVal(otherRate)){
        		JOptionPane.showMessageDialog(jScrollPane1, "Please rate Other between 1 and 10");//, "error", JOptionPane.ERROR_MESSAGE);
        	}
        
        docList.add(temp);
     	Serialize.serialize(docList, "src/doctor.bin");	//re adds the doc to the doc list with
     													//new information
   }
        
    // function for checking validity of email in the editButtonActionPerformed method
  
    // edit the information inputted into the text fields into the respective fields of the patient.
    private void editButtonActionPerformed(java.awt.event.ActionEvent evt, Patient patient){
    	int count = 0;
    	int patientIndex = 0;
    	Doctor temp = null;		
    	boolean change = false; // this boolean is to determine if information has been changed so that
    							// way we can display a pop-up message that says "Info changed".
    	
    	docList = Serialize.deserialize("src/doctor.bin");
    	
    	for(int i = 0; i < docList.size(); i++)	//finds and removes doc from the doc list
    											// we remove doc from the list so that way we can readd him
    											// and write a fresh new serializable file
        {
        	if(docList.get(i).getEmail().equalsIgnoreCase(patient.getDoctor().getEmail()) 
        			&& docList.get(i).getPassword().equals(patient.getDoctor().getPassword()))
        	{
        		for(int j = 0; j < docList.get(i).getPatientList().size(); j++){
        			if(patient.getEmail().equalsIgnoreCase(docList.get(i).getPatientList().get(j).getEmail())
        					&& patient.getPassword().equals(docList.get(i).getPatientList().get(j).getPassword())){
        						patientIndex = j;
        						temp = docList.get(i);
        						docList.remove(i);
        			     		break;
        			}
        		}
        	}
        }
    	
    	// checks to see if new email has been entered. In order to check the validity of the email, 
    	// we use the class Validator.
    	if(!editEmail.getText().equals("") && !editEmail.getText().equals("Enter new email address here")){
    		if(Validator.isEmail(editEmail.getText())){
	    		 String newEmail = editEmail.getText();	
	    	     patientEmail.setText(newEmail);
	    	     editEmail.setText("");
	    	     temp.getPatientList().remove(patientIndex);
	    	     patient.setEmail(newEmail);
	    	     temp.getPatientList().add(patientIndex, patient);
	    	     change = true;

    		}
    		else{
    			javax.swing.JOptionPane.showMessageDialog(jScrollPane1, "Please enter a valid email.");
    			editEmail.setText("");
    		}
    	}
    	
    	// checks to see if new phone number has been entered. In order to check the validity of the 
    	// phone number we use the class Validator.
    	if(!editPhone.getText().equals("") && !editPhone.getText().equals("Enter new phone number here")){
    		if(Validator.isPhone(editPhone.getText())){
    		String newPhone= editPhone.getText();	
    		patientPhone.setText("(" + newPhone.substring(0, 3) + ") " + newPhone.substring(3, 6) + "-" + newPhone.substring(6, newPhone.length()));
   	     	editPhone.setText("");
   	     	temp.getPatientList().get(patientIndex).setPhoneNumber(newPhone);
		    change = true;
		    }
    		else{
    			editPhone.setText("");
    			javax.swing.JOptionPane.showMessageDialog(jScrollPane1, "Please enter a valid phone number in the form of XXXXXXXXXX with no spaces\n(i.e. 6235552455)");
    		}
    			
   	     }
    	
    	// checks to see if new street address is entered.
    	if(!editStreet.getText().equals("") && !editStreet.getText().equals("Enter new street address here")){
    		String newStreet = editStreet.getText();
    		streetAddr.setText(newStreet);
    		editStreet.setText("");
    		temp.getPatientList().get(patientIndex).setStreetAddress(newStreet);;
	    	change = true;
    	}
    	
    	// checks to see if new city/state/zip address is entered.
    	if(!editCityState.getText().equals("") && !editCityState.getText().equals("Enter new city, state zip here")){
    		String newCityState = editCityState.getText();
    		cityStateAddr.setText(newCityState);
    		editCityState.setText("");
    		temp.getPatientList().get(patientIndex).setCityStateAddress(newCityState);
	    	change = true;
    	}
    
    	// checks to see if new pharmacy name is enetered.
    	if(!editPharName.getText().equals("") && !editPharName.getText().equals("Enter new pharmacy name")){
    		String newPharName = editPharName.getText();
    		pharName.setText(newPharName);
    		editPharName.setText("");
    		temp.getPatientList().get(patientIndex).getPharmacy().changeName(newPharName);
	    	change = true;
    	}
    	
    	// checks to see if new pharmacy city/state address is entered
    	if(!editPharCity.getText().equals("") && !editPharCity.getText().equals("Enter new pharmacy city, state")){
    		String newPharCity = editPharCity.getText();
    		pharCityState.setText(newPharCity);
    		editPharCity.setText("");
    		temp.getPatientList().get(patientIndex).getPharmacy().changeAddr(newPharCity);
	    	change = true;
    	}
    	
    	// checks to see if new pharmacy phone number is entered. Like patient phone number, we use the
    	// Validator class to validate the phone number is in proper format.
    	if(!editPharPhone.getText().equals("") && !editPharPhone.getText().equals("Enter new pharmacy phone number")){
    		if(Validator.isPhone(editPharPhone.getText())){
        		String newPhone= editPharPhone.getText();	
        		pharPhone.setText("(" + newPhone.substring(0, 3) + ") " + newPhone.substring(3, 6) + "-" + newPhone.substring(6, newPhone.length()));
       	     	editPharPhone.setText("");
       	     	temp.getPatientList().get(patientIndex).getPharmacy().changePhone(newPhone);
	 	    	change = true;
        		}
        		else{
        			editPharPhone.setText("");
        			javax.swing.JOptionPane.showMessageDialog(jScrollPane1, "Please enter a valid pharmacy phone number in the form of XXXXXXXXXX with no spaces\n(i.e. 6235552455)");
        		}
    	}
    	
    	// we use the boolean change in order to display the correct pop-up message
    	if(!change)
    		javax.swing.JOptionPane.showMessageDialog(jScrollPane1, "Please enter new profile information in their respective text fields.");
    	else
    		javax.swing.JOptionPane.showMessageDialog(jScrollPane1, "Profile information changed.");
    	
    
    	docList.add(temp);
     	Serialize.serialize(docList, "src/doctor.bin");	//re adds the doc to the doc list with
     													//new information    	
    }
    
    // This method is responsible for displaying the symptom information in the text area of the 
    // "View Submissions" tab depending on what symptom the user selects in the combo box. Accordingly,
    // the text area will display the date of submission as well as what it was rated at that time.
    private void tableActionPerformed(java.awt.event.ActionEvent evt, Patient patient){
    	int patientIndex = 0;
    	Doctor temp = null;
    	showSymptoms.setText(""); // initialize text to being empty
    	
    	docList = Serialize.deserialize("src/doctor.bin");
    	
    	for(int i = 0; i < docList.size(); i++)	// finds the doctor in the list in order to retrieve 
												// the patient of the selected doctor
        {
        	if(docList.get(i).getEmail().equalsIgnoreCase(patient.getDoctor().getEmail()) 
        			&& docList.get(i).getPassword().equals(patient.getDoctor().getPassword()))
        	{
        		for(int j = 0; j < docList.get(i).getPatientList().size(); j++){
        			if(patient.getEmail().equalsIgnoreCase(docList.get(i).getPatientList().get(j).getEmail())
        					&& patient.getPassword().equals(docList.get(i).getPatientList().get(j).getPassword())){
        						patientIndex = j;
        						temp = docList.get(i);
        			     		break;
        			}
        		}
        	}
        }
    	
    	for(int i = 0; i < temp.getPatientList().get(patientIndex).getSymptoms().size(); i++){
	    	// if symptom name is equal to the one in the combo box, then append symptoms to it
    		if(temp.getPatientList().get(patientIndex).getSymptoms().get(i).getName().equals
	    		((String)jComboBox1.getSelectedItem())){
	    			showSymptoms.append("On " + temp.getPatientList().get(patientIndex).getSymptoms().get(i).getDate()
	    					+ ", the symptom was rated " + temp.getPatientList().get(patientIndex).getSymptoms().get(i).getLevel()
	    					+ "\n");
	    	}
    	
    	}
    	
    }
    
    // In the "Messages" tab, this action handler is responsible for storing the dates of messages in 
    // the combo box.
    private void setMessageDates(Patient patient){
    	int patientIndex = 0;
    	Doctor temp = null;
    	messages.setText(null);
    	// reads in patients
    	docList = Serialize.deserialize("src/doctor.bin");
    	
    	for(int i = 0; i < docList.size(); i++)	// finds the doctor in the list in order to retrieve 
    											// the patient of the selected doctor
        {
        	if(docList.get(i).getEmail().equalsIgnoreCase(patient.getDoctor().getEmail()) 
        			&& docList.get(i).getPassword().equals(patient.getDoctor().getPassword()))
        	{
        		for(int j = 0; j < docList.get(i).getPatientList().size(); j++){
        			if(patient.getEmail().equalsIgnoreCase(docList.get(i).getPatientList().get(j).getEmail())
        					&& patient.getPassword().equals(docList.get(i).getPatientList().get(j).getPassword())){
        						patientIndex = j;
        						temp = docList.get(i);
        			     		break;
        			}
        		}
        	}
        }
    	
    	 ArrayList<String> dates = new ArrayList<String>();
         
         // adds the dates to the dates combo box starting with a blank one
         dates.add("");
         
         // dateDoesntExist boolean is used to get rid of duplicate dates in the combo box and only have
         // one instance of a date
         boolean dateDoesntExist;
         
         // go through each message that a patient has and check if there is a new date in each message.
         // Recall that the format of a message is MM/DD/YYYY and we use substrings to divide individual
         // information.
         if(temp.getPatientList().get(patientIndex).getMessageList().size() > 0){
	         for(int i = 0; i < temp.getPatientList().get(patientIndex).getMessageList().size(); i++){
	        	 dateDoesntExist = true;
	         	for(int j = 0; j < dates.size(); j++){
	         		if(dates.get(j).equals(temp.getPatientList().get(patientIndex).getMessageList().get(i).substring(0, 11)))
	         			dateDoesntExist = false;	         	
	         	}
	         	if(dateDoesntExist)
	         		dates.add(temp.getPatientList().get(patientIndex).getMessageList().get(i).substring(0, 11));
	         }
         }
         else
        	 messages.append("No messages found.");
         
         messageDates.setModel(new javax.swing.DefaultComboBoxModel(dates.toArray()));
         
         
    }
    
    // in the "Messages" tab, this action handler is responsible for displaying the most recent
    // prescription prescribed to the patient in the prescriptionSummary text area.
    private void setPrescriptions(Patient patient){
    	prescriptionSummary.setText(null); // initialize to empty
    	int patientIndex = 0;
    	Doctor temp = null;
    	
    	// reads in patients
    	docList = Serialize.deserialize("src/doctor.bin");
    	
    	for(int i = 0; i < docList.size(); i++)	// finds the doctor in the list in order to retrieve 
												// the patient of the selected doctor
        {
        	if(docList.get(i).getEmail().equalsIgnoreCase(patient.getDoctor().getEmail()) 
        			&& docList.get(i).getPassword().equals(patient.getDoctor().getPassword()))
        	{
        		for(int j = 0; j < docList.get(i).getPatientList().size(); j++){
        			if(patient.getEmail().equalsIgnoreCase(docList.get(i).getPatientList().get(j).getEmail())
        					&& patient.getPassword().equals(docList.get(i).getPatientList().get(j).getPassword())){
        						patientIndex = j;
        						temp = docList.get(i);
        			     		break;
        			}
        		}
        	}
        }
    	
    	// store the size in a variable so that way we can conserve space when we constantly use size 
    	// in displaying the information
    	int size = temp.getPatientList().get(patientIndex).getPharmacy().getPrescriptions().size();
    	
    	// checks if there are prescriptions in the first place. If not, then it will say no prescriptions found.
    	if(size > 0){
	    	prescriptionSummary.append("Latest prescription:\n");
	    	prescriptionSummary.append("At " + temp.getPatientList().get(patientIndex).getPharmacy().getName() +
	    			" in " + temp.getPatientList().get(patientIndex).getPharmacy().getAddress() + ",\n" + 
	    			temp.getPatientList().get(patientIndex).getPharmacy().getPrescriptions().get(size -1).
	    			getName() + " has been filed " + temp.getPatientList().get(patientIndex).getPharmacy().
	    			getPrescriptions().get(size-1).getFrequency() + " times and in " +
	    			temp.getPatientList().get(patientIndex).getPharmacy().getPrescriptions().get(size-1).getDose() +
	    			" mg doses each\n");
    	}
    	else
    		prescriptionSummary.append("No prescriptions found. Please request your doctor to file a prescription.");
    }
    
    // in the "Messages" tab, patient can select a date from the combo box and see the date's respective
    // message. This action handler deals with displaying the messages on a certain date in the message
    // text area. Recall that messages are in the form: MM/DD/YYYY <message>. Consequently, we use
    // substrings to separate the string as a whole and check for individual parts
    private void messageDatesActionPerformed(java.awt.event.ActionEvent evt, Patient patient) {                                             
    	int patientIndex = 0;
    	Doctor temp = null;
    	
    	// reads in patients
    	docList = Serialize.deserialize("src/doctor.bin");
    	
    	for(int i = 0; i < docList.size(); i++)	// finds the doctor in the list in order to retrieve 
    											// the patient of the selected doctor
        {
        	if(docList.get(i).getEmail().equalsIgnoreCase(patient.getDoctor().getEmail()) 
        			&& docList.get(i).getPassword().equals(patient.getDoctor().getPassword()))
        	{
        		for(int j = 0; j < docList.get(i).getPatientList().size(); j++){
        			if(patient.getEmail().equalsIgnoreCase(docList.get(i).getPatientList().get(j).getEmail())
        					&& patient.getPassword().equals(docList.get(i).getPatientList().get(j).getPassword())){
        						patientIndex = j;
        						temp = docList.get(i);
        			     		break;
        			}
        		}
        	}
        }    	
    	
    	// stores the selected date into a variable that will be used to check each message in the ArrayList
    	String selectedDate = (String) messageDates.getSelectedItem();
        // clear the text area before displaying the messages of the newly selected date
    	messages.setText(null);
        	
    		// go through each message in the patient's message list and retrieve all the messages 
    		// associated with the date selected in the combo box. Each message will have the keyword
    		// MESSAGE in the front to denote a new message at a different time.
	        for(int i = 0; i < temp.getPatientList().get(patientIndex).getMessageList().size(); i++){
	        	if(selectedDate.compareTo(temp.getPatientList().get(patientIndex).getMessageList().get(i).substring(0, 11)) == 0){
	        		messages.append("MESSAGE: " + temp.getPatientList().get(patientIndex).getMessageList().get(i).substring
	        				(11, temp.getPatientList().get(patientIndex).getMessageList().get(i).length()) + "\n\n");
	        	}
	        }
        }
                                 

    // global variable declaration section includes all the GUI components              
    private javax.swing.JTabbedPane PatientTabbedPane;
    private javax.swing.JLabel anxietyLabel;
    private javax.swing.JSlider anxietySlider;
    private javax.swing.JLabel appetiteLabel;
    private javax.swing.JSlider appetiteSlider;
    private javax.swing.JLabel depressionLabel;
    private javax.swing.JSlider depressionSlider;
    private javax.swing.JLabel drowsinessLabel;
    private javax.swing.JSlider drowsinessSlider;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea showSymptoms;
    private javax.swing.JLabel nauseaLabel;
    private javax.swing.JSlider nauseaSlider;
    private javax.swing.JLabel otherLabel;
    private javax.swing.JSlider otherSlider;
    private javax.swing.JLabel painLabel;
    private javax.swing.JSlider painSlider;
    private javax.swing.JLabel shortnessOfBreathLabel;
    private javax.swing.JSlider shortnessOfBreathSlider;
    private javax.swing.JButton submitButton;
    private javax.swing.JPanel submitSymptomsTab;
    private javax.swing.JPanel symptomHistoryTab;
    private javax.swing.JLabel tirednessLabel;
    private javax.swing.JSlider tirednessSlider;
    private javax.swing.JLabel wellBeingLabel;
    private javax.swing.JSlider wellbeingSlider;
    private javax.swing.JLabel addressHeader;
    private javax.swing.JLabel cityStateAddr;
    private javax.swing.JLabel dateReceivedHeader;
    private javax.swing.JTextField editCityState;
    private javax.swing.JTextField editEmail;
    private javax.swing.JButton editInfoButton;
    private javax.swing.JTextField editPharCity;
    private javax.swing.JTextField editPharName;
    private javax.swing.JTextField editPharPhone;
    private javax.swing.JTextField editPhone;
    private javax.swing.JTextField editStreet;
    private javax.swing.JLabel emailHeader;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane JScrollPane3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox messageDates;
    private javax.swing.JLabel messageHeader;
    private javax.swing.JTextArea messages;
    private javax.swing.JLabel patientDOB;
    private javax.swing.JLabel patientEmail;
    private javax.swing.JPanel patientInfoPanel;
    private javax.swing.JLabel patientName;
    private javax.swing.JLabel patientPhone;
    private javax.swing.JLabel patientSex;
    private javax.swing.JLabel pharCityState;
    private javax.swing.JLabel pharHeader;
    private javax.swing.JLabel pharName;
    private javax.swing.JLabel pharPhone;
    private javax.swing.JLabel phoneHeader;
    private javax.swing.JLabel prescriptionHeader;
    private javax.swing.JTextArea prescriptionSummary;
    private javax.swing.JLabel providerName;
    private javax.swing.JLabel streetAddr;
    private ArrayList<Doctor> docList;
    // End of variables declaration                   
}